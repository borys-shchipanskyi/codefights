*** groupingDishes ***
    You have a list of dishes. Each dish is associated with a list of ingredients used to prepare it. You want to group the dishes by ingredients, so that for each ingredient you'll be able to find all the dishes that contain it (if there are at least 2 such dishes).

    Return an array where each element is a list with the first element equal to the name of the ingredient and all of the other elements equal to the names of dishes that contain this ingredient. The dishes inside each list should be sorted lexicographically. The result array should be sorted lexicographically by the names of the ingredients in its elements.

    Example

    For
      dishes = [["Salad", "Tomato", "Cucumber", "Salad", "Sauce"],
                ["Pizza", "Tomato", "Sausage", "Sauce", "Dough"],
                ["Quesadilla", "Chicken", "Cheese", "Sauce"],
                ["Sandwich", "Salad", "Bread", "Tomato", "Cheese"]]
    the output should be
      groupingDishes(dishes) = [["Cheese", "Quesadilla", "Sandwich"],
                                ["Salad", "Salad", "Sandwich"],
                                ["Sauce", "Pizza", "Quesadilla", "Salad"],
                                ["Tomato", "Pizza", "Salad", "Sandwich"]]
    For
      dishes = [["Pasta", "Tomato Sauce", "Onions", "Garlic"],
                ["Chicken Curry", "Chicken", "Curry Sauce"],
                ["Fried Rice", "Rice", "Onions", "Nuts"],
                ["Salad", "Spinach", "Nuts"],
                ["Sandwich", "Cheese", "Bread"],
                ["Quesadilla", "Chicken", "Cheese"]]
    the output should be
      groupingDishes(dishes) = [["Cheese", "Quesadilla", "Sandwich"],
                                ["Chicken", "Chicken Curry", "Quesadilla"],
                                ["Nuts", "Fried Rice", "Salad"],
                                ["Onions", "Fried Rice", "Pasta"]]
    Input/Output

    [time limit] 4000ms (go)
    [input] array.array.string dishes

    An array of dishes. dishes[i] for each valid i contains information about the ith dish: the first element of dishes[i] is the name of the dish and the following elements are the ingredients of that dish. Both the dish name and the ingredient names consist of English letters and spaces. It is guaranteed that all dish names are different. It is also guaranteed that ingredient names for one dish are also pairwise different.

    Guaranteed constraints:
    1 ≤ dishes.length ≤ 500,
    2 ≤ dishes[i].length ≤ 10,
    1 ≤ dishes[i][j].length ≤ 50.

    [output] array.array.string

    The array containing the grouped dishes.

*** areFollowingPatterns ***
    Given an array strings, determine whether it follows the sequence given in the patterns array. In other words, there should be no i and j for which strings[i] = strings[j] and patterns[i] ≠ patterns[j] or for which strings[i] ≠ strings[j] and patterns[i] = patterns[j].

    Example

    For strings = ["cat", "dog", "dog"] and patterns = ["a", "b", "b"], the output should be
    areFollowingPatterns(strings, patterns) = true;
    For strings = ["cat", "dog", "doggy"] and patterns = ["a", "b", "b"], the output should be
    areFollowingPatterns(strings, patterns) = false.

*** containsCloseNums ***
    Given an array of integers nums and an integer k, determine whether there are two distinct indices i and j in the array where nums[i] = nums[j] and the absolute difference between i and j is less than or equal to k.

    Example

    For nums = [0, 1, 2, 3, 5, 2] and k = 3, the output should be
    containsCloseNums(nums, k) = true.

    There are two 2s in nums, and the absolute difference between their positions is exactly 3.

    For nums = [0, 1, 2, 3, 5, 2] and k = 2, the output should be

    containsCloseNums(nums, k) = false.

    The absolute difference between the positions of the two 2s is 3, which is more than k.

*** swapLexOrder ***
    Given a string str and array of pairs that indicates which indices in the string can be swapped, return the lexicographically largest string that results from doing the allowed swaps. You can swap indices any number of times.

    Example

    For str = "abdc" and pairs = [[1, 4], [3, 4]], the output should be
    swapLexOrder(str, pairs) = "dbca".

    By swapping the given indices, you get the strings: "cbda", "cbad", "dbac", "dbca". The lexicographically largest string in this list is "dbca".

    Input/Output

    [time limit] 4000ms (go)
    [input] string str

    A string consisting only of lowercase English letters.

    Guaranteed constraints:
    1 ≤ str.length ≤ 104.

    [input] array.array.integer pairs

    An array containing pairs of indices that can be swapped in str (1-based). This means that for each pairs[i], you can swap elements in str that have the indices pairs[i][0] and pairs[i][1].

    Guaranteed constraints:
    0 ≤ pairs.length ≤ 5000,
    pairs[i].length = 2.

    [output] string