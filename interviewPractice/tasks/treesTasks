*** hasPathWithGivenSum ***
    Given a binary tree t and an integer s, determine whether there is a root to leaf path in t such that the sum of vertex values equals s.

    Example

    For

    t = {
        "value": 4,
        "left": {
            "value": 1,
            "left": {
                "value": -2,
                "left": null,
                "right": {
                    "value": 3,
                    "left": null,
                    "right": null
                }
            },
            "right": null
        },
        "right": {
            "value": 3,
            "left": {
                "value": 1,
                "left": null,
                "right": null
            },
            "right": {
                "value": 2,
                "left": {
                    "value": -2,
                    "left": null,
                    "right": null
                },
                "right": {
                    "value": -3,
                    "left": null,
                    "right": null
                }
            }
        }
    }
    and
    s = 7,
    the output should be hasPathWithGivenSum(t, s) = true.

    This is what this tree looks like:

          4
         / \
        1   3
       /   / \
      -2  1   2
        \    / \
         3  -2 -3
    Path 4 -> 3 -> 2 -> -2 gives us 7, the required sum.

    For

    t = {
        "value": 4,
        "left": {
            "value": 1,
            "left": {
                "value": -2,
                "left": null,
                "right": {
                    "value": 3,
                    "left": null,
                    "right": null
                }
            },
            "right": null
        },
        "right": {
            "value": 3,
            "left": {
                "value": 1,
                "left": null,
                "right": null
            },
            "right": {
                "value": 2,
                "left": {
                    "value": -4,
                    "left": null,
                    "right": null
                },
                "right": {
                    "value": -3,
                    "left": null,
                    "right": null
                }
            }
        }
    }
    and
    s = 7,
    the output should be hasPathWithGivenSum(t, s) = false.

    This is what this tree looks like:

          4
         / \
        1   3
       /   / \
      -2  1   2
        \    / \
         3  -4 -3
    There is no path from root to leaf with the given sum 7.

    Input/Output

    [time limit] 4000ms (go)

    [input] tree.integer t

    A binary tree of integers.

    Guaranteed constraints:
    0 ≤ tree size ≤ 5 · 104,
    -1000 ≤ node value ≤ 1000.

    [input] integer s

    An integer.

    Guaranteed constraints:
    -4000 ≤ s ≤ 4000.

    [output] boolean

    Return true if there is a path from root to leaf in t such that the sum of node values in it is equal to s, otherwise return false.

    [Go] Syntax Tips

*** isTreeSymmetric ***
    Given a binary tree t, determine whether it is symmetric around its center, i.e. each side mirrors the other.

    Example

        For

        t = {
            "value": 1,
            "left": {
                "value": 2,
                "left": {
                    "value": 3,
                    "left": null,
                    "right": null
                },
                "right": {
                    "value": 4,
                    "left": null,
                    "right": null
                }
            },
            "right": {
                "value": 2,
                "left": {
                    "value": 4,
                    "left": null,
                    "right": null
                },
                "right": {
                    "value": 3,
                    "left": null,
                    "right": null
                }
            }
        }

        the output should be isTreeSymmetric(t) = true.

        Here's what the tree in this example looks like:

            1
           / \
          2   2
         / \ / \
        3  4 4  3

        As you can see, it is symmetric.

        For

        t = {
            "value": 1,
            "left": {
                "value": 2,
                "left": null,
                "right": {
                    "value": 3,
                    "left": null,
                    "right": null
                }
            },
            "right": {
                "value": 2,
                "left": null,
                "right": {
                    "value": 3,
                    "left": null,
                    "right": null
                }
            }
        }

        the output should be isTreeSymmetric(t) = false.

        Here's what the tree in this example looks like:

            1
           / \
          2   2
           \   \
           3    3

        As you can see, it is not symmetric.

    Input/Output

        [time limit] 4000ms (go)

        [input] tree.integer t

        A binary tree of integers.

        Guaranteed constraints:
        0 ≤ tree size < 5 · 104,
        -1000 ≤ node value ≤ 1000.

        [output] boolean

        Return true if t is symmetric and false otherwise.

    [Go] Syntax Tips

*** findProfession ***

    Consider a special family of Engineers and Doctors. This family has the following rules:

        Everybody has two children.
        The first child of an Engineer is an Engineer and the second child is a Doctor.
        The first child of a Doctor is a Doctor and the second child is an Engineer.
        All generations of Doctors and Engineers start with an Engineer.

    We can represent the situation using this diagram:

                    E
               /         \
              E           D
            /   \        /  \
           E     D      D    E
          / \   / \    / \   / \
         E   D D   E  D   E E   D

    Given the level and position of a person in the ancestor tree above, find the profession of the person.
    Note: in this tree first child is considered as left child, second - as right.

    Example

    For level = 3 and pos = 3, the output should be
    findProfession(level, pos) = "Doctor".

    Input/Output

        [time limit] 4000ms (go)

        [input] integer level

        The level of a person in the ancestor tree, 1-based.

        Guaranteed constraints:
        1 ≤ level ≤ 30.

        [input] integer pos

        The position of a person in the given level of ancestor tree, 1-based, counting from left to right.

        Guaranteed constraints:
        1 ≤ pos ≤ 2(level - 1).

        [output] string

        Return Engineer or Doctor.

    [Go] Syntax Tips

    Note: Your solution should have only one BST traversal and O(1) extra space complexity, since this is what you will be asked to accomplish in an interview.

*** kthSmallestInBST ***

    A tree is considered a binary search tree (BST) if for each of its nodes the following is true:

    The left subtree of a node contains only nodes with keys less than the node's key.
    The right subtree of a node contains only nodes with keys greater than the node's key.
    Both the left and the right subtrees must also be binary search trees.
    Given a binary search tree t, find the kth smallest element in it.

    Note that kth smallest element means kth element in increasing order. See examples for better understanding.

    Example

    For

    t = {
        "value": 3,
        "left": {
            "value": 1,
            "left": null,
            "right": null
        },
        "right": {
            "value": 5,
            "left": {
                "value": 4,
                "left": null,
                "right": null
            },
            "right": {
                "value": 6,
                "left": null,
                "right": null
            }
        }
    }
    and k = 4, the output should be
    kthSmallestInBST(t, k) = 5.

    Here is what t looks like:

       3
     /   \
    1     5
         / \
        4   6
    The values of t are [1, 3, 4, 5, 6], and the 4th smallest is 5.

    For

    t = {
        "value": 1,
        "left": {
            "value": -1,
            "left": {
                "value": -2,
                "left": null,
                "right": null
            },
            "right": {
                "value": 0,
                "left": null,
                "right": null
            }
        },
        "right": null
    }

    and k = 1, the output should be
    kthSmallestInBST(t, k) = -2.

    Here is what t looks like:

         1
        /
      -1
      / \
    -2   0
    The values of t are [-2, -1, 0, 1], and the 1st smallest is -2.

    Input/Output

    [time limit] 4000ms (go)

    [input] tree.integer t

    A tree of integers. It is guaranteed that t is a BST.

    Guaranteed constraints:
    1 ≤ tree size ≤ 104,
    -105 ≤ node value ≤ 105.

    [input] integer k

    An integer.

    Guaranteed constraints:
    1 ≤ k ≤ tree size.

    [output] integer

    The kth smallest value in t.

*** isSubtree ***

    Given two binary trees t1 and t2, determine whether the second tree is a subtree of the first tree. A subtree for vertex v in a binary tree t is a tree consisting of v and all its descendants in t. Determine whether or not there is a vertex v (possibly none) in tree t1 such that a subtree for vertex v (possibly empty) in t1 equals t2.

    Example

    For

    t1 = {
        "value": 5,
        "left": {
            "value": 10,
            "left": {
                "value": 4,
                "left": {
                    "value": 1,
                    "left": null,
                    "right": null
                },
                "right": {
                    "value": 2,
                    "left": null,
                    "right": null
                }
            },
            "right": {
                "value": 6,
                "left": null,
                "right": {
                    "value": -1,
                    "left": null,
                    "right": null
                }
            }
        },
        "right": {
            "value": 7,
            "left": null,
            "right": null
        }
    }
    and

    t2 = {
        "value": 10,
        "left": {
            "value": 4,
            "left": {
                "value": 1,
                "left": null,
                "right": null
            },
            "right": {
                "value": 2,
                "left": null,
                "right": null
            }
        },
        "right": {
            "value": 6,
            "left": null,
            "right": {
                "value": -1,
                "left": null,
                "right": null
            }
        }
    }
    the output should be isSubtree(t1, t2) = true.

    This is what these trees look like:

          t1:             t2:
           5              10
          / \            /  \
        10   7          4    6
       /  \            / \    \
      4    6          1   2   -1
     / \    \
    1   2   -1
    As you can see, t2 is a subtree of t1 (the vertex in t1 with value 10).

    For

    t1 = {
        "value": 5,
        "left": {
            "value": 10,
            "left": {
                "value": 4,
                "left": {
                    "value": 1,
                    "left": null,
                    "right": null
                },
                "right": {
                    "value": 2,
                    "left": null,
                    "right": null
                }
            },
            "right": {
                "value": 6,
                "left": {
                    "value": -1,
                    "left": null,
                    "right": null
                },
                "right": null
            }
        },
        "right": {
            "value": 7,
            "left": null,
            "right": null
        }
    }
    and

    t2 = {
        "value": 10,
        "left": {
            "value": 4,
            "left": {
                "value": 1,
                "left": null,
                "right": null
            },
            "right": {
                "value": 2,
                "left": null,
                "right": null
            }
        },
        "right": {
            "value": 6,
            "left": null,
            "right": {
                "value": -1,
                "left": null,
                "right": null
            }
        }
    }
    the output should be isSubtree(t1, t2) = false.

    This is what these trees look like:

            t1:            t2:
             5             10
           /   \          /  \
         10     7        4    6
       /    \           / \    \
      4     6          1   2   -1
     / \   /
    1   2 -1
    As you can see, there is no vertex v such that the subtree of t1 for vertex v equals t2.

    For

    t1 = {
        "value": 1,
        "left": {
            "value": 2,
            "left": null,
            "right": null
        },
        "right": {
            "value": 2,
            "left": null,
            "right": null
        }
    }
    and

    t2 = {
        "value": 2,
        "left": {
            "value": 1,
            "left": null,
            "right": null
        },
        "right": null
    }
    the output should be isSubtree(t1, t2) = false.

    Input/Output

    [time limit] 4000ms (go)

    [input] tree.integer t1

    A binary tree of integers.

    Guaranteed constraints:
    0 ≤ tree size ≤ 6 · 104,
    -1000 ≤ node value ≤ 1000.

    [input] tree.integer t2

    Another binary tree of integers.

    Guaranteed constraints:
    0 ≤ tree size ≤ 6 · 104,
    -1000 ≤ node value ≤ 1000.

    [output] boolean

    Return true if t2 is a subtree of t1, otherwise return false.